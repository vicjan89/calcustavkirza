from typing import Any

from textengines.interfaces import TextEngine

from calcustavkirza.classes import Element
from calcustavkirza.select.devices import Device
# from calcustavkirza.Project import Project

class DCDoc:

    def ap_generate(self, te: TextEngine):
        te.h1('Система оперативного постоянного тока')
        te.h2('Описание')
        te.p('СОПТ служит для питания устройств РЗА, управления, сигнализации, оперативной блокировки объекта во всех '
             'режимах его работы. Тип системы заземления – IT, c изолированной нейтралью источника. Состав СОПТ:')
        te.ul('ШОТ с интегрированными зарядными устройствами (ЗУ) – 2 шт. и аккумуляторной батареей – 1 шт.;')
        te.ul('кабельная распределительная сеть;')
        te.ul('защитная аппаратура;')
        te.ul('коммутационные аппараты;')
        te.ul('устройства защиты от перенапряжений (УЗИП);')
        te.ul('устройства мониторинга СОПТ и выдачи сигналов о неисправностях;')
        te.ul('устройства ручного и автоматического контроля изоляции;')
        te.p('Организация питания потребителей РЗА обеспечивает:')
        te.ul('селективную работу защитных устройств СОПТ при КЗ в ее цепях и отстройку от максимальной нагрузки;')
        te.ul('сохранение в работе без перезагрузки терминалов РЗА, подключенных к неповрежденным присоединениям ШОТ;')
        te.ul('защиту от импульсных перенапряжений с помощью ограничителей перенапряжения;')
        te.ul('защиту кабелей от сверхтоков (перегрузки и КЗ);')
        te.p('Параметры системы контроля режимов работы и состояния оборудования СОПТ, обеспечиваемые примененным контроллером TONHE THJK005G-3S:')
        te.ul('Автоматический и визуальный контроль сопротивления изоляции АКБ')
        te.ul('Автоматический и визуальный контроль напряжения на шинах постоянного тока;')
        te.ul('Устройство ручного контроля напряжения полюсов секции относительно земли (с помощью аналогового '
              'вольтметра и переключателя).')
        te.ul('Сбор информации о неисправностях ШОТ. Отображение на дисплее контроллера журнала событий (неисправности, '
              'переключения коммутационных аппаратов и др.) ШОТ и хранение их в журнале контроллера ШОТ (глубина '
              'хранения не менее 90 дней для всех событий). Передача сигналов общей неисправности и замыкания на землю '
              'в АСУ.')
        te.h2('Выбор ёмкости АКБ')
        te.p('СОПТ обеспечивает рабочее и резервное электропитание следующих электрических приемников:')
        te.ul('устройств РЗА;')
        te.ul('устройств управления и приводов высоковольтных выключателей;')
        te.ul('устройства сигнализации;')
        te.p('Аккумуляторная батарея в нормальных условиях эксплуатируется в режиме постоянного поддерживающего заряда '
             '(Uпз.эл.). Номинальное напряжение Uпз.эл. для герметичных аккумуляторов – Uпз.эл. = 2,27 В/эл, при '
             't = 20 ºС. По ГОСТ 21128-83 для систем и сетей с номинальным напряжением 220 В, напряжение источников и '
             'преобразователей должно быть Uист=230 В. Количество элементов АКБ находящихся в режиме постоянного '
             'поддерживающего заряда: nэл = Uист/ Uэл= 230 / 2,27 = 101,3 шт. Выбираем большее значение, которое '
             'кратное 6 (кол-во элементов в аккумуляторе) nэл = 102 шт.')
        te.p('Емкость АКБ выбирается исходя из следующих условий:')
        te.ul('Питание полной нагрузки всех потребителей СОПТ и их безаварийной работы на время не менее чем 2 часа;')
        te.table_name('Мощность потребителей СОПТ в аварийном режиме')
        te.table_head('Нагрузка', 'Мощность потребления одного, Вт', 'Количество, шт.',
                      'Мощность потребления всех, Вт')
        # for name, (power, quantity) in self.project.power_consumption_agregate:
        #     te.table_row(name, f'{power:.2f}', quantity, f'{power * quantity:.2f}')
        # power_total = project.power_consumption_total
        # te.table_row('Итого', '', '', f'{power_total:.1f}')
        # power2 = power_total * 1.1
        # te.ul(f'Согласно таблицы мощность равна {power_total:.1f} Вт, для расчёта принимается мощность на 10% больше '
        #       f'(с учётом подключения перспективных нагрузок) {power2:.1f} Вт;')
        # power3 = power2 * 1.25
        # te.ul(f'Технологический запас (1,25), учитывающий снижение емкости АКБ к концу срока службы на 20 %. Мощность '
        #       f'с учётом технологического запаса {power3:.1f};')
        # power_all = power3 * 1.07
        # te.ul(f'Технологический запас, учитывающий эксплуатацию АКБ при пониженной температуре АКБ 15 ºС (повышающий '
        #       f'коэффициент 1,07 ТКП 339-2022 п. 6.3.2.23), относительно температуры 25 оС, которую приводят в каталогах '
        #       f'производители АБ как базовую. Итоговая мощность составит {power_all:.1f};')
        # te.ul('Предельно допустимое отклонение напряжения на клеммах электрических источников ΔUсопт плюс 10% '
        #       '(ΔUсопт «+» = 22 В), минус 10% (ΔUсопт «-» = 22 В).')
        # te.ul('Толчковая нагрузка не учитывается при расчетах, т.к. не оказывает существенного влияния на процесс '
        #       'разряда АКБ из-за небольшой продолжительности срабатывания соленоидов отключения.')
        # te.ul('Минимальное напряжение на потребителях Uпmin = 0,8 Uном = 0,8 * 220 = 176 В. Рассчитываем минимальное '
        #       'напряжение источника питания: Uиmin = Uпmin + 5% = 176 * 1,04  = 185 В')
        # te.ul('Рассчитываем минимальное напряжение на одном элементе АКБ в конце аварийного разряда: '
        #       'Uminэл = Umin /nэл = 183,6 / 102 = 1,79 В или 10,74 В на блок')
        # te.ul(f'Мощность, которую должна обеспечивать один элемент батареи, : Pрасч = {power_all:.1f} / 17 = '
        #       f'{power_all / 17:.1f} Вт/блок.')
        # te.p('Выбираем подходящую аккумуляторную батарею Ventura GPL12-18')
        # te.image(r'D:\Cloud-Drive_vicjan89@gmail.com\obsidian\work\factory_documentation\Аккумуляторы\Ventura GPL12-18.png',
        #          '', 60)
        # te.image(r'D:\Cloud-Drive_vicjan89@gmail.com\obsidian\work\factory_documentation\Аккумуляторы\Ventura GPL12-18_discharge.png',
        #          '', 60)
        # te.h2('Выбор зарядных устройств')
        # te.p('Зарядные устройства должны обеспечивать следующие функции:')
        # te.ul('Поддерживающий заряд АКБ с напряжением 2,23 В/эл. (231,9 В);')
        # te.ul('Заряд АКБ с напряжением 2,35 В/эл. (244,4В);')
        # te.ul('Уровень пульсаций не более значений, допустимых по условиям работы потребителей постоянного тока (ПТТ) и АКБ;')
        # te.ul('Возможность параллельной работы на стороне выпрямленного напряжения;')
        # te.ul('Контроль целостности цепи АКБ;')
        # te.ul('Регулирование напряжения поддерживающего заряда в зависимости от температуры АКБ;')
        # te.ul('Заряд АКБ после аварийного разряда до 90% паспортной ёмкости за время не более 8 часов;')
        # te.ul('Ограничение зарядного тока АКБ Iзар. макс.')
        # te.p('Максимальный выходной ток ЗУ Iву равен сумме тока потребителей СОПТ IРЗА (кроме аварийного освещения) и '
        #      'тока Iзар. макс., необходимого для заряда АКБ за время 8 часов. Iву = Iзар. макс. + IРЗА')
        # i = power_all / 220
        # te.p(f'Номинальный зарядный ток для АКБ выбираем равным 0,125 С10 (0.125*18): Iзар ном = 2,25 А. Ток потребителей в '
        #      f'нормальном режиме рассчитываем, исходя из потребляемой мощности {power_all:.1f} Вт, что при номинальном напряжении '
        #      f'составляет {i:.1f} А. Выходной ток ЗУ, для обеспечения условий заряда АКБ в послеаварийный период, должен '
        #      f'быть не менее: Iву = 2,25 А+ {i:.1f} А = {i + 2.25:.1f} А. Забранная емкость в ходе аварийного режима составит 18,0 А*ч. '
        #      f'При зарядном токе 2,25 А, время на заряд АКБ до уровня 90% составит около 8 часов. Окончательно принимаем '
        #      f'выходной ток зарядных устройств равным или более {self.idc} А.')

        te.h2('Методика расчёта тока КЗ')
        te.p('Ток короткого замыкания:')
        te.math(r'I_{\text{КЗ}} = \frac{E_{\text{расч}} \cdot n \cdot K_c}{R_{\text{сумм}}}')
        te.ul(f'где {te.m(r"E_{\text{расч}}", "Eрасч")} - ЭДС одного элемента аккумуляторной батареи (АКБ)'
              f'в конце разряда, В;')
        te.ul('n - количество элементов  АКБ;')
        te.ul('Kc=(0.59-0.79) - коэффициент снижения тока КЗ, учитывающий сопротивление дуги в месте КЗ (определяется '
              'по экспериментальной зависимости Кс=f(Rкз));')
        te.ul('Rсумм - сопротивление петли короткого замыкания')
        te.p('Rсумм = Rаб + Rош + Rк + Rкаб')
        te.ul('где Rаб - сопротивление АКБ;')
        te.ul('Rош - сопротивление ошиновки АКБ;')
        te.ul('Rк - сопротивление переходных контактов автоматов и рубильников;')
        te.ul('Rкаб - суммарное сопротивление жилы кабеля от АКБ до удалённой нагрузки и обратно;')
        te.p('Коэффициент чувствительности:')
        te.math(r'K_{\text{Ч}} = \frac{I_{\text{КЗ}}}{I_{\text{ср_защ}}}')
        te.ul(f'где {te.m(r"I_{\text{ср_защ}}", "Iср_защ")} - ток срабатывания защитного аппарата (автоматического выключателя) '
              f'или номинальный ток предохранителя.')
        te.p('Кч - должен быть больше 1.4 для электромагнитных расцепителей автоматических выключателей с номинальным '
             'током до 100А и болше 3 для предохранителей')

        te.h2('Расчёт тока КЗ')
        akb = {parameter_value.parameter.name: parameter_value.value for parameter_value in self.akb.device.parameter_values.all()}
        n = int(akb['Количество элементов, шт.'])
        r = int(akb['Внутреннее сопротивление АКБ, мОм'])
        umin = float(akb['Минимальное напряжение на элементе АКБ в конце разряда, В'])

        te.p(f'Аккумуляторная батарея: {n} элементов с внутренним сопротивлением {r} Ом и полным '
             f'сопротивлением {n}·{r} = {n * r:.1f} мОм и ЭДС в конце разряда '
             f'{umin} В на элемент и полным ЭДС {n * umin:.1f} В.')
        te.table_name('Расчёт сопротивлений проводников петли КЗ')
        te.table_head('Участок сети', 'Удельное сопротивление, Ом·мм²/м', 'Длина кабеля, м',
                      'Сечение жилы проводника, мм²', 'Rкаб, Ом')
        r_total = 0
        for line in self.cables.all():
            ro = 0.0175
            s = float(line.device.parameter_values.get(parameter__name='Площадь поперечного сечения, мм.кв.').value)
            l = line.quantity
            r_line = ro * l / s
            te.table_row(line.name, ro, l, s, f'{r_line:.4f}')
            r_total += r_line
        te.table_row('Итого', '', '', '', f'{r_total:.4f}')
        te.table_name('Сопротивление элементов защитных аппаратов')
        te.table_head('Обозначение', 'Rк, Ом')
        rk = 0
        for qf in self.qf.all():
            te.table_row(f'{qf.device.name} {qf.device.parameters}', 0.0013)
            rk += 0.0013
        r_total += rk
        te.table_row('Итого', rk)
        r_total += r * n / 1000
        isc = umin * n * 0.59 / r_total
        te.math(r'I_{\text{КЗ}} = \frac{' + str(umin) + r' \cdot ' + str(n) + r' \cdot ' + str(0.59) +
                '}{' + f'{r_total:.5f}' + '} = ' + f'{isc:.1f} A')
        # return isc


class DC(Element):
    idc: int | None = None # номинальный ток зарядного устройства
    mark_akb: str | None = None # марка модуля АКБ
    mark_power_supply: str | None = None # марка зарядного устройства

    def model_post_init(self, __context) -> None:
        super().model_post_init(__context)
        if self.idc is None:
            self.idc = int(input("Введите номинальный ток выпрямительного устройства: "))
        if self.mark_akb is None:
            self.mark_akb = input('Введите марку блока АКБ: ')
        if self.mark_power_supply is None:
            self.mark_power_supply = input('Введите марку зарядного устройства: ')

